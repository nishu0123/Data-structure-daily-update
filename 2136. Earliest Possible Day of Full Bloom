bool static comp(pair<int ,int > p1 , pair<int , int > p2)
    {
        return p1.first > p2.first;
    }
    int earliestFullBloom(vector<int>& plantTime, vector<int>& growTime) {
        vector<pair<int ,int > > v;
        int n = plantTime.size();
        int i;
        int sum = 0;
        for(i=0; i<n; i++)
        {
            v.push_back({growTime[i] , plantTime[i]});
            sum = sum + plantTime[i];
        }
        sort(v.begin() , v.end() , comp);
        int maxval = INT_MIN;
        int temp = sum;
        for(i=0; i<n; i++)
        {
            // maxval = max(maxval - v[i+1].second ,v[i+1].first );
            temp = temp - v[i].second;
            maxval = max(v[i].first - temp   ,maxval );
            
        }
        if(maxval <0){maxval = 0; }
        cout<<sum;
        return maxval + sum; 
    }
